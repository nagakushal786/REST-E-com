Database - a tool that helps us to store data

Relational Database - data stored in the form of tables(to relate multiple data items/tables)
Performance issues while reading with large set of data
Table - schema(structure of database)
Row - record
Column - field

NOSql Database - data stored in JSON format(schema less)
We dont know what kind of information we are receiving in the application
Better at reading large set of data
Unstructured and unpredictable data
More flexible data storage 
Table - collection
Row - document
Column - attribute

Object oriented Database - data stored in the form of objects

Hierarchial Database - data stored in the form of parent-child relation

Commands to perform CRUD operations
mongosh - run mongodb shell
show dbs - show all available databases
use dbname - create new database
db.collectionName.insertOne({json data}) - creates a new collection and inserts a document into that created database
show collections - show all available collections
db.collectionName.insertMany([json array]) - inserts multiple documents
db.collectionName.findOne({condition}) - returns the suited document
- When condition applies to multiple documents, then returns the document inserted first
db.collectionName.find({condition}) - returns all suited documents
db.collectionName.find() - returns all the documents of the collection
db.collectionName.updateOne({filter}, {$set:{update}}) - updates the document using the filter - similarly updateMany
db.collectionName.deleteOne({filter}) - deletes the document as per the filter
db.collectionName.deleteMany({}) - deletes all the documents in the collection
db.collectionName.replaceOne(oldFilter, newDocument, [options]) - changes entire document
-[options] is optional

Repository pattern -

Models                 Models
Database access  =>    Repository
                       Controllers
Controllers

Mongoose:
ODM(Object Data Modelling tool) for nodejs
Easier interactions from code to the database(not replacing MongoDB)
Better structure
Validations
More controls using middlewares
Rich API

Relationships in Mongoose:
One to One - 1 document in a collection can be related to 1 document in another collection
One to Many
Many to Many

Database best practices:
Schema design - represent dataset in database
1. Flat schema - simplifies implementation
2. Nested schema
Indexing
Error handling
Validations
