Product Controller:
Get a Product - Done
Add a Product - Done
Get a single / multiple products - Done
Rate a Product - Done
Filter a Product - Done

Cart Controller:
Add items to the cart - Done
Get items to the cart - Done
Remove items from the cart - Done

UserController:
Signup: Email, Password, TypeOfUser(customer, seller) - Done
Signin: Email, Password - Done

Summarizing the project:
Folder structure
Route configuration
Creating APIs
Different API methods
Middlewares
Route parameters
Query parameters
Testing API using postman
Securing API with JWT token
Documenting API using swagger
CORS policy
Logging
Error handling

Best practices:
Using correct status codes
Error handling
Input validation
Using correct request methods
Secured APIs
Use naming conventions for URL
Rest API naming conventions.

Aggragate pipelining:
1. Average price of products per category
db.products.aggregate([
  $group:{
    _id:"$name",
    avgPrice:{$avg:"$price}
  }
])

2. Average rating of a product
db.products.aggregate([
  // 1. Create documents for ratings
  {
    $unwind:"$ratings"
  },
  // 2. Group rating per product and get the average
  {
    $group:{
      _id:"$name",
      avgRating:{$avg:"$ratings.rating"}
    }
  }
])

3. $size accepts array, so be careful
db.products.aggregate([
  // 1. project the name of product and count of rating
  {
    $project:{
      name:1,
      countOfRating:{
        $cond:{if:{$isArray:"$ratings"}, then:{$size:"$ratings"}, else:0}
      }
    }
  }
])

4. Find product with lowest number of ratings
db.products.aggregate([
  // 1. project the name of product and count of rating
  {
    $project:{
      name:1,
      countOfRating:{
        $cond:{if:{$isArray:"$ratings"}, then:{$size:"$ratings"}, else:0}
      }
    }
  },
  // 2. sort the collection
  {
    $sort:{
      countOfRating:1
    }
  },
  // 3. Limit to just 1 item in result
  {
    $limit:1
  }
])